// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crawler.proto

package plugincrawlerpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// UpdCrawlerCommand - updcrawler
type UpdCrawlerCommand struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdCrawlerCommand) Reset()         { *m = UpdCrawlerCommand{} }
func (m *UpdCrawlerCommand) String() string { return proto.CompactTextString(m) }
func (*UpdCrawlerCommand) ProtoMessage()    {}
func (*UpdCrawlerCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_crawler_51937acdb8b2d82e, []int{0}
}
func (m *UpdCrawlerCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdCrawlerCommand.Unmarshal(m, b)
}
func (m *UpdCrawlerCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdCrawlerCommand.Marshal(b, m, deterministic)
}
func (dst *UpdCrawlerCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdCrawlerCommand.Merge(dst, src)
}
func (m *UpdCrawlerCommand) XXX_Size() int {
	return xxx_messageInfo_UpdCrawlerCommand.Size(m)
}
func (m *UpdCrawlerCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdCrawlerCommand.DiscardUnknown(m)
}

var xxx_messageInfo_UpdCrawlerCommand proto.InternalMessageInfo

// ExpArticleCommand - exparticle
type ExpArticleCommand struct {
	// URL - url
	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	// PDF - pdf filename
	PDF                  string   `protobuf:"bytes,2,opt,name=PDF,proto3" json:"PDF,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExpArticleCommand) Reset()         { *m = ExpArticleCommand{} }
func (m *ExpArticleCommand) String() string { return proto.CompactTextString(m) }
func (*ExpArticleCommand) ProtoMessage()    {}
func (*ExpArticleCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_crawler_51937acdb8b2d82e, []int{1}
}
func (m *ExpArticleCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpArticleCommand.Unmarshal(m, b)
}
func (m *ExpArticleCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpArticleCommand.Marshal(b, m, deterministic)
}
func (dst *ExpArticleCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpArticleCommand.Merge(dst, src)
}
func (m *ExpArticleCommand) XXX_Size() int {
	return xxx_messageInfo_ExpArticleCommand.Size(m)
}
func (m *ExpArticleCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpArticleCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ExpArticleCommand proto.InternalMessageInfo

func (m *ExpArticleCommand) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *ExpArticleCommand) GetPDF() string {
	if m != nil {
		return m.PDF
	}
	return ""
}

func init() {
	proto.RegisterType((*UpdCrawlerCommand)(nil), "plugincrawlerpb.UpdCrawlerCommand")
	proto.RegisterType((*ExpArticleCommand)(nil), "plugincrawlerpb.ExpArticleCommand")
}

func init() { proto.RegisterFile("crawler.proto", fileDescriptor_crawler_51937acdb8b2d82e) }

var fileDescriptor_crawler_51937acdb8b2d82e = []byte{
	// 116 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2e, 0x4a, 0x2c,
	0xcf, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2f, 0xc8, 0x29, 0x4d, 0xcf,
	0xcc, 0x83, 0x0a, 0x16, 0x24, 0x29, 0x09, 0x73, 0x09, 0x86, 0x16, 0xa4, 0x38, 0x43, 0xf8, 0xce,
	0xf9, 0xb9, 0xb9, 0x89, 0x79, 0x29, 0x4a, 0xe6, 0x5c, 0x82, 0xae, 0x15, 0x05, 0x8e, 0x45, 0x25,
	0x99, 0xc9, 0x39, 0xa9, 0x50, 0x41, 0x21, 0x01, 0x2e, 0xe6, 0xd0, 0x20, 0x1f, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0xce, 0x20, 0x10, 0x13, 0x24, 0x12, 0xe0, 0xe2, 0x26, 0xc1, 0x04, 0x11, 0x09, 0x70,
	0x71, 0x4b, 0x62, 0x03, 0xdb, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x90, 0x30, 0xc4, 0xdc,
	0x76, 0x00, 0x00, 0x00,
}
